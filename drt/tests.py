# AUTOGENERATED! DO NOT EDIT! File to edit: 00_tests.ipynb (unless otherwise specified).

__all__ = ['create_test_folder']

# Cell
#export
from nbdev.showdoc import *
from .create_environment import *
from .environment import DataIntakeEnv
from .registration import register_all
from .receipt import sync_data_folder
from .verification import check_datagroup
import drt.data_model as dm
from pathlib import Path
import shutil
import drt
import re
from zipfile import ZipFile
try:
    import importlib.resources as pkg_resources
except ImportError:
    # Try backported to PY<37 `importlib_resources`.
    import importlib_resources as pkg_resources


# Cell
def create_test_folder(test_path:Path):
    """
    Create a folder in a location with dummy data ready to be registered
    """
    if test_path.exists() and test_path.is_dir():
        shutil.rmtree(test_path)
    create_environment(test_path)
    # TODO : Turn this into a zip extraction to avoid interference

    (test_path/'01_Delivery').rmdir()
    (test_path/'02_RAW').rmdir()
    (test_path/'03_Datasets').rmdir()

    with pkg_resources.path(drt, 'test_files') as test:
        with ZipFile(test/'zipped_test.zip', 'r') as zipObj:
            zipObj.extractall(test_path)

        # shutil.copytree((test/'01_Delivery'), (test_path / '01_Delivery'),dirs_exist_ok=True)
        # shutil.copytree((test/'02_RAW'), (test_path / '02_RAW'),dirs_exist_ok=True)
        # shutil.copytree((test/'03_Datasets'), (test_path / '03_Datasets'),dirs_exist_ok=True)
    env = DataIntakeEnv(test_path / '.config' / 'config.ini')

    register_all(env)

    for data_folder in test_path.iterdir():
        if data_folder.is_dir():
            for data_group in data_folder.iterdir():
                if data_group.name[0] not in ['.','_']:
                    if data_folder.name == '01_Delivery':
                        if (data_group/'receipt.rst').exists():
                            with open(data_group/'receipt.rst', 'rt') as recpt:
                                text = recpt.read()
                                text = re.sub('(.*\n:Date Received: )None(.*)', '\\1 2020-01-04\\2', text, re.MULTILINE)
                                text = re.sub('(.*\n:Received from: )None(.*)', '\\1Dummy Recepient\\2',text, re.MULTILINE)
                                text = re.sub('(.*\nDescription:\n-+\n)None(.*)', '\\1Lorem ipsum Dolor sit Amet\\2', text, re.MULTILINE)
                            with open(data_group/'receipt.rst', 'wt') as recpt:
                                recpt.write(text)
                    else:
                        if (data_group/'receipt.rst').exists():
                            with open(data_group/'receipt.rst', 'rt') as recpt:
                                text = recpt.read()
                                text = re.sub('(.*\nDescription:\n-+\n)None(.*)', '\\1Lorem ipsum Dolor sit Amet\\2', text, re.MULTILINE)
                                text = re.sub('(.*\nReport\n-+\n)None(\n.*)', '\\1Dummy HTML Report\\2', text, re.MULTILINE)
                            with open(data_group/'receipt.rst', 'wt') as recpt:
                                recpt.write(text)

    [sync_data_folder(env,group_type ) for group_type in [dm.Delivery, dm.Raw_Data, dm.Dataset] ]


